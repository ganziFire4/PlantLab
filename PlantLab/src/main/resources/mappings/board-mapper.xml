<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BoardDao">
    <insert id="post" parameterType="board">
        INSERT INTO BOARD (
              MEM_ID
            , BOARD_TYPE
            , BOARD_TITLE
            , BOARD_CONTENT
        ) VALUES (
              #{mem_id}
            , #{board_type}
            , #{board_title}
            , #{board_content}
        )
    </insert>

    <update id="modify" parameterType="board">
        UPDATE BOARD
            SET
                BOARD_TYPE = #{board_type}
              , BOARD_TITLE = #{board_title}
              , BOARD_CONTENT = #{board_content}
              , BOARD_MOD = #{board_mod}
            WHERE BOARD_ID = #{board_id}
    </update>

    <delete id="delete" parameterType="int">
        DELETE FROM BOARD WHERE BOARD_ID = #{id}
    </delete>

    <select id="view_popular" parameterType="map" resultType="board">
        SELECT ROW_NUMBER() OVER (
                <choose>
                    <when test="popCondition == null or popCondition == 'view'">
                        ORDER BY B.BOARD_VIEW_CNT DESC
                    </when>
                    <when test="popCondition == 'like'">
                        ORDER BY B.BOARD_LIKE_CNT DESC
                    </when>
                    <otherwise>
                        ORDER BY B.BOARD_BOOKMARK_CNT DESC
                    </otherwise>
                </choose>
            ) AS ROW_NUM
            , SUB.*
            FROM (
                SELECT B.BOARD_ID
                     , B.BOARD_TITLE
                     , M.MEM_NICKNAME
                     , B.BOARD_REG
                     , B.BOARD_VIEW_CNT
                     , B.BOARD_LIKE_CNT
                     , B.BOARD_BOOKMARK_CNT
                    FROM BOARD B
                    JOIN MEMBER M
                      ON B.MEM_ID = M.MEM_ID
                    WHERE BOARD_TYPE = #{tab}
            ) SUB
            LIMIT 5
    </select>

    <select id="view_all" parameterType="map" resultType="board">
        SELECT A.*
            FROM(
                SELECT ROW_NUMBER() OVER (
                <choose>
                    <when test="table.rec_condition == null or table.rec_condition == 'rec'">
                        ORDER BY SUB.BOARD_REG DESC
                    </when>
                    <when test="table.rec_condition == 'view'">
                        ORDER BY SUB.BOARD_VIEW_CNT DESC
                    </when>
                    <when test="table.rec_condition == 'like'">
                        ORDER BY SUB.BOARD_LIKE_CNT DESC
                    </when>
                    <otherwise>
                        ORDER BY SUB.BOARD_BOOKMARK_CNT DESC
                    </otherwise>
                </choose>
                ) AS ROW_NUM
                , SUB.*
                FROM (
                SELECT B.BOARD_ID
                , B.BOARD_TITLE
                , M.MEM_NICKNAME
                , B.BOARD_REG
                , B.BOARD_VIEW_CNT
                , B.BOARD_LIKE_CNT
                , B.BOARD_BOOKMARK_CNT
                FROM BOARD B
                JOIN MEMBER M
                ON B.MEM_ID = M.MEM_ID
                WHERE BOARD_TYPE = #{tab}
                ) SUB
                WHERE 1 = 1
                <if test="searchMap.search_keyword != null and searchMap.search_keyword != ''">
                    <if test="searchMap.search_condition == 'all'">
                        AND (SUB.BOARD_TITLE LIKE CONCAT('%', #{searchMap.search_keyword}, '%')
                        OR SUB.MEM_NICKNAME LIKE CONCAT('%', #{searchMap.search_keyword}, '%'))
                    </if>
                    <if test="searchMap.search_condition == 'title'">
                        AND SUB.BOARD_TITLE LIKE CONCAT('%', #{searchMap.search_keyword}, '%'
                    </if>
                    <if test="searchMap.search_condition == 'writer'">
                        AND SUB.MEM_NICKNAME LIKE CONCAT('%', #{searchMap.search_keyword}, '%')
                    </if>
                </if>
                )A
                WHERE A.ROW_NUM &gt;= #{cri.startNum} + 1 AND A.ROW_NUM &lt; #{cri.startNum} + #{cri.amount} + 1
    </select>

    <select id="view_one" parameterType="int" resultType="board">
        SELECT B.BOARD_ID
             , B.BOARD_TITLE
             , M.MEM_NICKNAME
             , B.BOARD_REG
             , B.BOARD_MOD
             , B.BOARD_LIKE_CNT
             , B.BOARD_BOOKMARK_CNT
             , B.BOARD_CONTENT
             , B.BOARD_TYPE
             , M.MEM_PIC
             , B.MEM_ID
             , B.BOARD_CHECKED
        FROM BOARD B
        JOIN MEMBER M
          ON B.MEM_ID = M.MEM_ID
        WHERE B.BOARD_ID = ${id}
    </select>

    <select id="getBoard" parameterType="int" resultType="board">
        SELECT AA.*
        FROM (
            SELECT B.BOARD_ID
                 , B.BOARD_TITLE
                 , B.BOARD_REG
                 , M.MEM_NICKNAME
                 , B.BOARD_TYPE
                 , ROW_NUMBER() over (PARTITION BY B.BOARD_TYPE ORDER BY BOARD_TYPE ASC, BOARD_ID ASC) AS num
                FROM BOARD B
                JOIN MEMBER M
                  ON B.MEM_ID = M.MEM_ID
                WHERE B.MEM_ID = #{mem_id}
                ) AA
                WHERE AA.NUM &lt;= 3;
    </select>

    <update id="update_view_cnt" parameterType="int">
        UPDATE BOARD
            SET
                BOARD_VIEW_CNT = BOARD_VIEW_CNT + 1
            WHERE BOARD_ID = ${id}
    </update>

    <select id="getBoardTotal" parameterType="map" resultType="int">
        SELECT COUNT(*)
            FROM BOARD B
            JOIN MEMBER M
              ON B.MEM_ID = M.MEM_ID
            WHERE B.BOARD_TYPE = #{tab}
        <if test="searchMap.search_keyword != null and searchMap.search_keyword != ''">
            <if test="searchMap.search_condition == 'all'">
                AND (B.BOARD_TITLE LIKE CONCAT('%', #{searchMap.search_keyword}, '%')
                OR M.MEM_NICKNAME LIKE CONCAT('%', #{searchMap.search_keyword}, '%'))
            </if>
            <if test="searchMap.search_condition == 'title'">
                AND B.BOARD_TITLE LIKE CONCAT('%', #{searchMap.search_keyword}, '%')
            </if>
            <if test="searchMap.search_condition == 'writer'">
                AND M.MEM_NICKNAME LIKE CONCAT('%', #{searchMap.search_keyword}, '%')
            </if>
        </if>
    </select>

    <update id="clickLike" parameterType="int">
        UPDATE BOARD
            SET
                BOARD_LIKE_CNT = BOARD_LIKE_CNT + 1
        WHERE BOARD_ID = #{board_id}
    </update>

    <insert id="addLike" parameterType="map">
        INSERT INTO BOARD_LIKE(
            BOARD_ID, MEM_ID
        ) VALUES (
            #{board_id}, #{mem_id}
        )
    </insert>

    <update id="dclickLike" parameterType="int">
        UPDATE BOARD
        SET
            BOARD_LIKE_CNT = BOARD_lIKE_CNT - 1
        WHERE BOARD_ID = #{board_id}
    </update>

    <delete id="deleteLike" parameterType="map">
        DELETE FROM BOARD_BOOKMARK
            WHERE BOARD_ID = #{board_id}
              AND MEM_ID = #{mem_id}
    </delete>

    <update id="clickBookmark" parameterType="int">
        UPDATE BOARD
        SET
            BOARD_BOOKMARK_CNT = BOARD_BOOKMARK_CNT + 1
        WHERE BOARD_ID = #{board_id}
    </update>

    <insert id="addBookmark" parameterType="map">
        INSERT INTO BOARD_BOOKMARK(
            BOARD_ID, MEM_ID
        ) VALUES (
                     #{board_id}, #{mem_id}
                 )
    </insert>

    <update id="dclickBookmark" parameterType="int">
        UPDATE BOARD
        SET
            BOARD_BOOKMARK_CNT = BOARD_BOOKMARK_CNT - 1
        WHERE BOARD_ID = #{board_id}
    </update>

    <delete id="deleteBookmark" parameterType="map">
        DELETE FROM BOARD_BOOKMARK
            WHERE BOARD_ID = #{board_id}
              AND MEM_ID = #{mem_id}
    </delete>

    <insert id="postComment" parameterType="boardCommentDto">
        INSERT INTO BOARD_COMMENT(
              BOARD_ID
            , MEM_ID
            , COMMENT_CONTENT
        ) VALUES (
              #{board_id}
            , #{mem_id}
            , #{comment_content}
        )
    </insert>

    <delete id="deleteComment" parameterType="int">
        DELETE FROM BOARD_COMMENT
            WHERE COMMENT_ID = #{id}
    </delete>

    <select id="showComment" parameterType="int" resultType="boardCommentDto">
        SELECT BC.COMMENT_ID
             , BC.BOARD_ID
             , BC.MEM_ID
             , M.MEM_PIC
             , M.MEM_NICKNAME
             , BC.IS_CHECKED
             , BC.COMMENT_CONTENT
             , BC.COMMENT_REG
            FROM BOARD_COMMENT BC
            JOIN MEMBER M
              ON BC.MEM_ID = M.MEM_ID
            WHERE BC.BOARD_ID = #{board_id}
            ORDER BY BC.IS_CHECKED DESC, BC.COMMENT_ID ASC
    </select>

    <update id="board_checked" parameterType="int">
        UPDATE BOARD
            SET
                BOARD_CHECKED = 1;
            WHERE BOARD_ID = #{board_id}
    </update>

    <update id="comment_checked" parameterType="int">
        UPDATE BOARD_COMMENT
            SET
                IS_CHECKED = 1;
            WHERE COMMENT_ID = #{id}
    </update>

    <update id="member_checked" parameterType="int">
        UPDATE MEMBER
            SET
                CHECKED_CNT = CHECKED_CNT + 1
            WHERE MEM_ID = #{mem_id}
    </update>
</mapper>